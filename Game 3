package g3;

import java.util.ArrayList;
import java.util.Random;
import java.io.FileWriter;   // Import the FileWriter class
import java.io.IOException;  // Import the IOException class to handle errors

public class g3 {
	
	public static final int[] redNumbers = {1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36};
	public static final int[] blackNumbers = {2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35};
	public static final int[] greenNumbers = {0};
	public static final double simulations = 10000;
	
	public static void main(String[] args) throws IOException
	{
		FileWriter myWriter = new FileWriter("C:\\Users\\denis\\OneDrive\\Desktop\\MSISS 2nd year\\Algorithms and Data Structures 1\\AlgorithmsCode\\ProbProject\\g3\\RunningAverage.txt");
		FileWriter myWriter2 = new FileWriter("C:\\Users\\denis\\OneDrive\\Desktop\\MSISS 2nd year\\Algorithms and Data Structures 1\\AlgorithmsCode\\ProbProject\\g3\\RunningVariance.txt");
		FileWriter myWriter3 = new FileWriter("C:\\Users\\denis\\OneDrive\\Desktop\\MSISS 2nd year\\Algorithms and Data Structures 1\\AlgorithmsCode\\ProbProject\\g3\\RunningAverage2.txt");
		FileWriter myWriter4 = new FileWriter("C:\\Users\\denis\\OneDrive\\Desktop\\MSISS 2nd year\\Algorithms and Data Structures 1\\AlgorithmsCode\\ProbProject\\g3\\RunningVariance2.txt");
		double maxWinnings = 0;
		double maxloss = 0;
		double numberOfWins = 0;
		double numberOfBets = 0;
		double totalWinnings = 0;
		double numberOfGames = 0;
		
		ArrayList<Double> amounts = new ArrayList<Double>();
		ArrayList<Double> runningAverage = new ArrayList<Double>();
		ArrayList<Double> runningVariance = new ArrayList<Double>();
		ArrayList<Double> runningAverage2 = new ArrayList<Double>();
		ArrayList<Double> runningVariance2 = new ArrayList<Double>();
		
		ArrayList<Double> runningTimeList = new ArrayList<Double>();
		ArrayList<Double> runningProportionList = new ArrayList<Double>();
		ArrayList<Double> runningWinningsList = new ArrayList<Double>();
		
		for (int i=0; i<simulations; i++)
		{
			numberOfGames++;
			double numberOfWins2 = 0;
			double betAmount = 1;
			double cumulativeBet = 0;
			while (cumulativeBet<10 && betAmount<100)
			{
				cumulativeBet -= betAmount;
				numberOfBets += 1;
				if (runGame())
				{
					cumulativeBet += 2*betAmount;
					betAmount = 1;
				}
				else
				{
					betAmount += betAmount;
				}
			}
			totalWinnings += cumulativeBet;
			if (maxWinnings<cumulativeBet)
			{
				maxWinnings = cumulativeBet;
			}
			if (cumulativeBet<maxloss)
			{
				maxloss = cumulativeBet;
			}
			if (cumulativeBet>0)
			{
				numberOfWins++;
				numberOfWins2++;
			}
			amounts.add(cumulativeBet);
			
			// Code to find running average for expected winnings
			double total = 0;
			double summation = 0;
			for (int b=0; b<amounts.size(); b++)
			{
				total += amounts.get(b);
			}
			runningAverage.add(total/amounts.size());
			
			// Code to find running variance for expected winnings
			for (int b=0; b<amounts.size(); b++)
			{
				summation += (Math.pow((amounts).get(b)- (total/amounts.size()), 2));
			}
			double currentRunningVariance = summation/(amounts.size()-1);
			double currentRunningAverage = (total/amounts.size());
			runningVariance.add(currentRunningVariance);
			
			//Code to find running average for proportion won
			double numberOfGamesWonA = 0;
			double numberOfGamesWonV = 0;
			
			double currentRunningAverage2 = numberOfWins/numberOfGames;
			runningAverage2.add(currentRunningAverage2);
			
			//code to find running variance for proportion won
			for (int b = 0; b < runningAverage2.size(); b++)
			{
				numberOfGamesWonV += (Math.pow((numberOfWins2-(numberOfWins/numberOfGames) ),2));
			}
			double currentRunningVariance2 = numberOfGamesWonV/ ((numberOfGames-1));
			
			runningVariance2.add(currentRunningVariance2);
			
			// Code to write to file
		    try {
		        myWriter.write(String.valueOf(currentRunningAverage));
		        myWriter.write(String.format("%n"));
		      } catch (IOException e) {
		        System.out.println("An error occurred.");
		        e.printStackTrace();
		      }
		    
			// Code to write to file
		    try {
		        myWriter2.write(String.valueOf(currentRunningVariance));
		        myWriter2.write(String.format("%n"));
		      } catch (IOException e) {
		        System.out.println("An error occurred.");
		        e.printStackTrace();
		      }
		    
		    try {
		        myWriter3.write(String.valueOf(currentRunningAverage2));
		        myWriter3.write(String.format("%n"));
		      } catch (IOException e) {
		        System.out.println("An error occurred.");
		        e.printStackTrace();
		      }
		    
		    try {
		        myWriter4.write(String.valueOf(currentRunningVariance2));
		        myWriter4.write(String.format("%n"));
		      } catch (IOException e) {
		        System.out.println("An error occurred.");
		        e.printStackTrace();
		      }	    
		}
		myWriter.close();
		myWriter2.close();
		myWriter3.close();
		myWriter4.close();
		System.out.println("The expected winnings per game " + totalWinnings/simulations);
		System.out.println("The proportion of games you win " + numberOfWins/simulations);
		System.out.println("The expected playing time per game " + numberOfBets/simulations);
		System.out.println("The maximum amount you can win " + maxWinnings);
		System.out.println("The maximum amount you can lose " + maxloss);
		
		//Ingrid
		
		double averageWinnings = totalWinnings/simulations;
		double sumOfWinningsForVariance = 0;
		double winningsVariance = 0;
		
		for(int i = 0; i<runningWinningsList.size();i++)
		{
			sumOfWinningsForVariance += Math.pow(runningWinningsList.get(i) - averageWinnings,2);
		}
		
		winningsVariance = sumOfWinningsForVariance /(simulations - 1);
		System.out.println("Winnings Variance: "+winningsVariance);
		
		
		
		double averageProportionOfWins = numberOfWins/simulations;
		double sumOfProportionsForVariance = 0;
		double proportionVariance = 0;
		
		for(int i = 0; i<runningProportionList.size();i++)
		{
			sumOfProportionsForVariance += Math.pow(runningProportionList.get(i) - averageProportionOfWins,2);
		}
		
		proportionVariance = sumOfProportionsForVariance /(simulations - 1);
		System.out.println("Proportion Variance: "+proportionVariance);
		
		
		
		
		
		double averageTimePlayed = numberOfBets/simulations;
		double sumOfTimesForVariance = 0;
		double timeVariance = 0;
		
		for(int i = 0; i<runningTimeList.size();i++)
		{
			sumOfTimesForVariance += Math.pow(runningTimeList.get(i) - averageTimePlayed,2);
		}
		
		timeVariance = sumOfTimesForVariance /(simulations - 1);
		System.out.println("Time Variance: "+timeVariance);
		
		
		
	}
	
	public static boolean runGame()
	{
		int valueReturned = getRandomInt();
		if (binarySearch(redNumbers, valueReturned))
		{
			return true;
		}
		return false;
	}
	
	public static int getRandomInt()
	{
		Random rand = new Random();
		int n = rand.nextInt(37);
		return n;
	}
	
	public static boolean binarySearch(int[] a, int key)
	{
		int lo = 0, hi = a.length-1;
		while (lo <= hi)
		{
			int mid = lo + (hi - lo) / 2;
			if (key < a[mid]) hi = mid - 1;
			else if (key > a[mid]) lo = mid + 1;
			else return true;
		}
		return false;
	}
}
