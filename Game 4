package g4;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Random;

public class g4 {

	public static final int[] redNumbers = {1,3,5,7,9,12,14,16,18,19,21,23,25,27,30,32,34,36};
	public static final int[] blackNumbers = {2,4,6,8,10,11,13,15,17,20,22,24,26,28,29,31,33,35};
	public static final int[] greenNumbers = {0};
	public static final double simulations = 10000;
	
	public static void main(String[] args) throws IOException
	{
		double numberOfGames = 0; //number of bets
		double numberOfBets = 0;
		double maxWinnings = 0;
		double maxloss = 0;
		double numberOfWins = 0;
		double totalWinnings = 0;
		FileWriter myWriter = new FileWriter("C:\\Users\\denis\\OneDrive\\Desktop\\MSISS 2nd year\\Algorithms and Data Structures 1\\AlgorithmsCode\\ProbProject\\g3\\RA1.txt");
		FileWriter myWriter2 = new FileWriter("C:\\Users\\denis\\OneDrive\\Desktop\\MSISS 2nd year\\Algorithms and Data Structures 1\\AlgorithmsCode\\ProbProject\\g3\\RV1.txt");
		FileWriter myWriter3 = new FileWriter("C:\\Users\\denis\\OneDrive\\Desktop\\MSISS 2nd year\\Algorithms and Data Structures 1\\AlgorithmsCode\\ProbProject\\g3\\RA2.txt");
		FileWriter myWriter4 = new FileWriter("C:\\Users\\denis\\OneDrive\\Desktop\\MSISS 2nd year\\Algorithms and Data Structures 1\\AlgorithmsCode\\ProbProject\\g3\\RV2.txt");
		ArrayList<Double> amounts = new ArrayList<Double>();
		ArrayList<Double> runningAverage = new ArrayList<Double>();
		ArrayList<Double> runningVariance = new ArrayList<Double>();
		ArrayList<Double> runningAverage2 = new ArrayList<Double>();
		ArrayList<Double> runningVariance2 = new ArrayList<Double>();
		ArrayList<Double> numberOfWinsArray = new ArrayList<Double>();
		ArrayList<Double> numberOfGamesArray = new ArrayList<Double>();
		
		for (int i=0; i<simulations; i++)
		{
			numberOfGames++;
			double numberOfWins2 = 0;
			
			ArrayList<Integer> numbers = new ArrayList<Integer>();
			numbers.add(1);
			numbers.add(2);
			numbers.add(3);
			numbers.add(4);
			double betAmount = (numbers.get(0)+numbers.get(numbers.size()-1));
			double cumulativeBet = 0;
			while (!numbers.isEmpty() && betAmount<=100)
			{
				cumulativeBet -= betAmount;
				numberOfBets += 1;
				if (runGame())
				{
					cumulativeBet += 2*betAmount;
					if (numbers.size()<2)
					{
						numbers.remove(0);
					}
					else
					{
						numbers.remove(0);
						numbers.remove(numbers.size()-1);	
					}
				}
				else
				{
					int temp = 0;
					if(numbers.size()==1)
					{
						temp = (numbers.get(0));
					}
					else
					{
						temp = (numbers.get(0)+numbers.get(numbers.size()-1));
					}
					numbers.add(temp);
				}
				if (!numbers.isEmpty())
				{
					if(numbers.size()==1)
					{
						betAmount = (numbers.get(0));
					}
					else
					{
						betAmount = (numbers.get(0)+numbers.get(numbers.size()-1));
					}
				}
			}
			totalWinnings += cumulativeBet;
			if (maxWinnings<cumulativeBet)
			{
				maxWinnings = cumulativeBet;
			}
			if (cumulativeBet<maxloss)
			{
				maxloss = cumulativeBet;
			}
			if (cumulativeBet>0)
			{
				numberOfWins++;
				numberOfWins2++;
			}
			amounts.add(cumulativeBet);
			
			//Running average expected winnings
			double total = 0;
			double summation = 0;
			for (i=0; i<amounts.size(); i++)
			{
				total += amounts.get(i);
			}
			runningAverage.add(total/amounts.size());
			
			//Running variance expected winnings.
			for (i=0; i<amounts.size(); i++)
			{
				summation += (Math.pow((amounts).get(i)- (total/amounts.size()), 2));
			}
			double currentRunningVariance = summation/(amounts.size()-1);
			double currentRunningAverage = (total/amounts.size());
			runningVariance.add(currentRunningVariance);
			
			//Code to find running average for proportion won
			double numberOfGamesWonA = 0;
			double numberOfGamesWonV = 0;
			double currentRunningAverage2 = numberOfWins/numberOfGames;
			runningAverage2.add(currentRunningAverage2); //so far
			
			//code to find running variance for proportion won
			for (int b = 0; b < numberOfWinsArray.size(); b++)
			{
				numberOfGamesWonV += (Math.pow((numberOfWins2-(currentRunningAverage2) ),2));
			}
			double currentRunningVariance2 = numberOfGamesWonV / (numberOfGames-1);
			runningVariance2.add(currentRunningVariance2);
			
			
			// Code to write to file
		    try {
		        myWriter.write(String.valueOf(currentRunningAverage));
		        myWriter.write(String.format("%n"));
		      } catch (IOException e) {
		        System.out.println("An error occurred.");
		        e.printStackTrace();
		      }
		    
			// Code to write to file
		    try {
		        myWriter2.write(String.valueOf(currentRunningVariance));
		        myWriter2.write(String.format("%n"));
		      } catch (IOException e) {
		        System.out.println("An error occurred.");
		        e.printStackTrace();
		      }
		    
		    try {
		        myWriter3.write(String.valueOf(currentRunningAverage2));
		        myWriter3.write(String.format("%n"));
		      } catch (IOException e) {
		        System.out.println("An error occurred.");
		        e.printStackTrace();
		      }
		    try {
		        myWriter4.write(String.valueOf(currentRunningVariance2));
		        myWriter4.write(String.format("%n"));
		      } catch (IOException e) {
		        System.out.println("An error occurred.");
		        e.printStackTrace();
		      }
		}
		myWriter.close();
		myWriter2.close();
		myWriter3.close();
		myWriter4.close();
		System.out.println("The expected winnings per game " + totalWinnings/simulations);
		System.out.println("The proportion of games you win " + numberOfWins/simulations);
		System.out.println("The expected playing time per game " + numberOfGames/simulations);
		System.out.println("The maximum amount you can win " + maxWinnings);
		System.out.println("The maximum amount you can lose " + maxloss);
		
		
		//Ingrid
	    double currentWinnings = totalWinnings/gamesPlayed;
	    runningWinningsList.add(currentWinnings);
	    
	    double currentProportionWon = numberOfWins/gamesPlayed;
	    runningProportionList.add(currentProportionWon);
	    
		double currentTimePlayed = noBets/noGames;
		runningTimeList.add(currentTimePlayed);
	}

	public static boolean runGame()
	{
		int valueReturned = getRandomInt();
		if (binarySearch(redNumbers, valueReturned))
		{
			return true;
		}
		return false;
	}
	
	public static int getRandomInt() 
	{
		Random rand = new Random();
		int n = rand.nextInt(37);
		return n;
	}
	
	public static boolean binarySearch(int[] a, int key)
	 {
		int lo = 0, hi = a.length-1;
		while (lo <= hi)
		{
			int mid = lo + (hi - lo) / 2;
			if (key < a[mid]) hi = mid - 1;
			else if (key > a[mid]) lo = mid + 1;
			else return true;
		}
		return false;
	 }
}
